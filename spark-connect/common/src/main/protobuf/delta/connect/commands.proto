/*
 * Copyright (2024) The Delta Lake Project Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package delta.connect;

import "delta/connect/base.proto";

option java_multiple_files = true;
option java_package = "io.delta.connect.proto";

// Message to hold all command extensions in Delta Connect.
message DeltaCommand {
  oneof command_type {
    CloneTable clone_table = 1;
    VacuumTable vacuum_table = 2;
    UpgradeTableProtocol upgrade_table_protocol = 3;
    Generate generate = 4;
  }
}

// Command that creates a copy of a DeltaTable in the specified target location.
message CloneTable {
  // (Required) The source Delta table to clone.
  DeltaTable table = 1;

  // (Required) Path to the location where the cloned table should be stored.
  string target = 2;

  // (Optional) Optional parameter to clone a previous state of the source table. The current
  // state of the table is cloned when it is not specified.
  oneof version_or_timestamp {
    // Clones the source table as of the provided version.
    int32 version = 3;
    // Clones the source table as of the provided timestamp.
    string timestamp = 4;
  }

  // (Required) Performs a clone when true, this field should always be set to true.
  bool is_shallow = 5;

  // (Required) Overwrites the target location when true.
  bool replace = 6;

  // (Required) User-defined table properties that override properties with the same key in the
  // source table.
  map<string, string> properties = 7;
}

// Command that deletes files and directories in the table that are not needed by the table for
// maintaining older versions up to the given retention threshold
message VacuumTable {
  // (Required) The Delta table to vacuum.
  DeltaTable table = 1;

  // (Optional) Number of hours retain history for. If not specified, then the default retention
  // period will be used.
  optional double retention_hours = 2;
}

// Command to updates the protocol version of the table so that new features can be used.
message UpgradeTableProtocol {
  // (Required) The Delta table to upgrade the protocol of.
  DeltaTable table = 1;

  // (Required) The minimum required reader protocol version.
  int32 reader_version = 2;

  // (Required) The minimum required writer protocol version.
  int32 writer_version = 3;
}

// Command that generates manifest files for a given Delta table.
message Generate {
  // (Required) The Delta table to generate the manifest files for.
  DeltaTable table = 1;

  // (Required) The type of manifest file to be generated.
  string mode = 2;
}
